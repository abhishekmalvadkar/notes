Code Review should be treated as teaching opportunities rather then fault finding process
As a team lead your focus should be on team success instead of Focus on your individual contribution to software
Code review purpose is to help people for learning and add value to people knowledge and add value to system
Whenever you find some pattern wrong in code then add that into team best practices so any other team member will do not do that same mistake
While reviewing code we are looking lots of things like below :
Is this code doing expected requirement or not? Means suppose we are building the feature and this code is building that feature or not? This is the primary thing that we are looking first
Next thing is are we following the common standard best practices or not ? Like naming convention or closing resource or not ? But these things like naming convention and closing resources check can be automated by tool and i don't find this is where good use of people to check manually
Next thing which cannot be done by automated tools like we are following three layer aarchitecture and are we following or not ? And certain validation we are performing in project do are we doing that in code or not ?
The another think which not cached by automated tools is how are you handling failures and how are you dealing with slowness suppose you are calling another api and what if there is a latency issue, those things can be checked by people only in review code process 
So mantainbility, scalibility and performance of the code needs to check in code review
Code review is not science but it's art
You should not check functions requirement are implemented or not only but you should also check non functional requirements are implemented or not?
Code Review is an expensive process because someone needs to give time on it by stoping their productive time
Your code is readable, maintainable or not it's not validate by tools thats why code review person needs to check it and readability, maintainablity are the first thing that I am looking while reviewing the code
Is this code changeable easily or not ? Clean or not? If any features need to add in this code then is it easy or hard because of not understandable code?
Leave the code in better shape when you started working on it ( Boys Scot rule)
Suppose you are changing at one place, and you can see something bad just below your line and it can be make it better then do that make it clean if possible
After that I was looking that whatever he did in code is it done in efficient manner or is there any optimization we can do in it because we know one thing can be done in 10 different ways
Shiva said that , I am learning one thing from my teach lead is that whenever we are building festure then my teach lead told me that ok deploy it on dev env and test possitive and negative cases and try to check log files that for negative case are you able identify the issue from log file or not ? They said the logging is very important so proper logging or not there I am checking in code review
I am very keen about logging
Readability is primary thing
As one service is communicating to another service so I am also checking that timeout is handled properly or not ?
Code quality is an attitude that team should have
Readability
Debuggability (logging)
Efficiency
How do you have handled failures means resilience is important
I have seen that developer are using fancy things to chow off that they know it but this is wrong when for loop is Efficient then why we should use stream 
Sonar has lot's of things like naming conven and bad practices that sonar will tell you but sonar has lot's of rules and learning to all will take more time and some organization's defines their set of rules in Sonar according to their requirements
Sonar is also telling you security hotspot issues
In sonar somethings we need to ignore if not as possible based on your requirements
Their are others sa well like checkstyle , pnb , find bugs Rae simmilar to sonar
Recently I have use Google java format tool
In javascript we have eslint and in typescript we have tslint and I think eslint will have 200 to 300
 rules it's insane and it is very much opinionated
Add Sonar from your day 1 of project and if you are adding it after sometime then it is going to be create complexity
If you listen your Intelij ide then lots of sonar rules atomatically cover , it's suggestions lot's of things
It's hard to add Sonar in existing projects but better late is better then never do so add it now because further you delay it's going to be more worse
Customizing the rules in Sonar


